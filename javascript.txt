1、鉴于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。
2、NaN这个特殊的Number与所有其他值都不相等，包括它自己：唯一能判断NaN的方法是通过isNaN()函数：
3、大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。
4、变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句
5、使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次
6、要显示变量的内容，可以用console.log(x)
7、逗号返回最后一个表达式的值
8、var 加不加都可以，但是在函数内不加var声明为全局变量

在JavaScript中，Date对象用来表示日期和时间。
要获取系统当前时间，用：
var now = new Date();
now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)
now.getFullYear(); // 2015, 年份
now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月
now.getDate(); // 24, 表示24号
now.getDay(); // 3, 表示星期三
now.getHours(); // 19, 24小时制
now.getMinutes(); // 49, 分钟
now.getSeconds(); // 22, 秒
now.getMilliseconds(); // 875, 毫秒数
now.getTime(); // 1435146562875, 以number形式表示的时间戳
var d = new Date(2015, 5, 19, 20, 15, 30, 123);
d; // Fri Jun 19 2015 20:15:30 GMT+0800 (CST)
JavaScript的Date对象月份值从0开始，牢记0=1月，1=2月，2=3月，……，11=12月。

var d = Date.parse('2015-06-24T19:49:22.875+08:00');
d; // 1435146562875
var d = new Date(1435146562875);
d; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)

==============================================RE
正则表达式
第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp('正则表达式')创建一个RegExp对象。

两种写法是一样的：
var re1 = /ABC\-001/;
var re2 = new RegExp('ABC\\-001');

re1; // /ABC\-001/
re2; // /ABC\-001/

re方法
re.exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。
需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符，加个?就可以采用非贪婪匹配：

var re = /^(\d+?)(0*)$/;

==============================================JSON
JSON还定死了字符集必须是UTF-8。为了统一解析，JSON的字符串规定必须用双引号""，Object的键也必须用双引号""。
让对象序列化成JSON格式的字符串
var s = JSON.stringify(xiaoming);
要输出得好看一些，可以加上参数，按缩进输出：

JSON.stringify(xiaoming, null, '  ');


一、1 字符串
1、如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符
2、如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：'I\'m \"OK\"!';
3、由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` ... ` 表示
4、要把多个字符串连接起来，可以用+号连接：
5、如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：
var name = '小明';
var age = 20;
var message = `你好, ${name}, 你今年${age}岁了!`;
alert(message);
6、要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：
需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：
7、字符串函数大全
str.toUpperCase(); // 大写
str.toLowerCase(); // 小写
str.indexOf();://会搜索指定字符串出现的位置：s.indexOf('world'); 没有找到指定的子串，返回-1
s.substring(0, 5); :指定索引区间的子串

一、2 数组
1、JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。要取得Array的长度，直接访问length属性
2、请注意，直接给Array的length赋一个新的值会导致Array大小的变化
3、Array可以通过索引把对应的元素修改为新的值，因此，对Array的索引进行赋值会直接修改这个Array
4、请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化
5、与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置：
var arr = [10, 20, '30', 'xyz'];
arr.indexOf(10); // 元素10的索引为0
6、slice
slice()就是对应String的substring()版本，arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
7、push和pop
push(element)向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
8、unshift和shift
如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
var arr = [1, 2];arr.unshift('A', 'B'); // 返回Array新的长度: 4
arr.shift(); // 'A' arr; // ['B', 1, 2]
9、sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：
10、reverse()把整个Array的元素给掉个个，也就是反转
11、splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：
arr.splice(2, 3, 'a', 'b'); //在数组第2个位置开始，删除3个元素，然后添加2个元素
12、concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：
var arr = ['A', 'B', 'C']; var added = arr.concat([1, 2, 3]);
请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。
实际上，concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里：
13、join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：
arr.join('-'); // 'A-B-C-1-2-3'
14、多维数组
如果数组的某个元素又是一个Array，则可以形成多维数组，例如：
var arr = [[1, 2, 3], [400, 500, 600], '-'];上述Array包含3个元素，其中头两个元素本身也是Array。

一、3 对象
1、JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。类似python字典
2、访问属性是通过.操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：
这种情况下只能通过中括号访问xiaohong['middle-school']; 
3、添加属性直接用dict.name="value"
4、删除一个属性用delete dict.name
5、检查属性是否在对象里用in："name" in dict
6、要判断一个属性是否是对象自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：
dict.hasOwnProperty('name'); 

二、1 控制语句
1、条件判断
JavaScript使用if () { ... } else { ... }来进行条件判断。
2、多行条件判断
if ( ) {alert('adult');} 
		else if (age >= 6) {alert('teenager');} 
						else {alert('kid');}
3、JavaScript的循环有两种，
一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块：
for (var i=1; i<=10000; i++) {
    x = x + i;}
 如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环：

for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来：
var o = {  name: 'Jack',  age: 20, city: 'Beijing'};
for (var key in o) {console.log(key);} // 'name', 'age', 'city'

4、while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。
var x = 0;
while (n > 0) { x = x + n; n = n - 2;x;}
5、do ... while
最后一种循环是do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：
用do { ... } while()循环要小心，循环体会至少执行1次，而for和while循环则可能一次都不执行。

三、Map和Set
JavaScript的默认对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
为了解决这个问题，最新的ES6规范引入了新的数据类型Map。

初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：
var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);
var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined
由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：

Set
Set和Map类似，也是一组key的集合，但不存储value，可以认为是集合。
由于key不能重复，所以，在Set中，没有重复的key。
要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set：
var s1 = new Set(); // 空Set
var s2 = new Set([1, 2, 3]); // 含1, 2, 3
重复元素在Set中自动被过滤：

s.add(4);  //通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果：
s; // Set {1, 2, 3, 4}
s.add(4); //仍然是 Set {1, 2, 3, 4}
s.delete(3); //通过delete(key)方法可以删除元素：

四、Iterable
遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，
Array、Map和Set都属于iterable类型。而对象不是iterable类型
具有iterable类型的集合可以通过新的for ... of循环来遍历。

你可能会有疑问，for ... of循环和for ... in循环有何区别：
for ... in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。

然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。
以Array为例：
'use strict';
var a = ['A', 'B', 'C'];
a.forEach(function (element, index, array) {console.log(element + ', index = ' + index);});

五、函数
上述abs()函数的定义如下：

function指出这是一个函数定义；
abs是函数的名称；
(x)括号内列出函数的参数，多个参数以,分隔；
{ ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。
请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。

function a(){}（函数声明）返回undefined（不会执行），仅仅是函数声明（声明提前）
var res = function a(){}() （函数表达式），立即执行该函数，必须使用一个变量接收返回值，否则报错
(function a(){})() （函数表达式）,立即执行该函数，不必须使用变量接收

在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。

闭包还可以把多参数的函数变成单参数的函数。例如，要计算xy可以用Math.pow(x, y)函数，不过考虑到经常计算x2或x3，我们可以利用闭包创建新的函数pow2和pow3：

S6标准新增了一种新的函数：Arrow Function（箭头函数）。

x => x * x
上面的箭头函数相当于：
function (x) {
    return x * x;
}
两个参数：
(x, y) => x * x + y * y

// 无参数:
() => 3.14

// 可变参数:
(x, y, ...rest) => {
    var i, sum = x + y;
    for (i=0; i< rest.length; i++) {
        sum += rest[i];
    }
    return sum;
}

如果要返回一个对象，就要注意，如果是单表达式，这么写
x => ({ foo: x })

generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。
function* foo(x) {
    yield x + 1;
    yield x + 2;
    return x + 3;
}
return只能返回一次，yield可以返回多次



不要使用new Number()、new Boolean()、new String()创建包装对象；
用parseInt()或parseFloat()来转换任意类型到number；
用String()来转换任意类型到string，或者直接调用某个对象的toString()方法,null和undefined就没有；
通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}；
typeof操作符可以判断出number、boolean、string、function和undefined；
判断Array要使用Array.isArray(arr)；
判断null请使用myVar === null；
判断某个全局变量是否存在用typeof(window.myVar) === 'undefined'；
函数内部判断某个变量是否存在用typeof(myVar) === 'undefined'。

六、对象
可以{}构造对象
可以用构造函数构造对象
对象继承其母对象的prototype，可以用__proto__来进行追溯
如果用新的class关键字来编写Student，可以这样写：
class Student {
    constructor(name) {
        this.name = name;
    }

    hello() {
        alert('Hello, ' + this.name + '!');
    }
}

用class定义对象的另一个巨大的好处是继承更方便了。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：

class PrimaryStudent extends Student {
    constructor(name, grade) {
        super(name); // 记得用super调用父类的构造方法!
        this.grade = grade;
    }

    myGrade() {
        alert('I am at grade ' + this.grade);
    }
}


==============================================浏览器相关
1、window对象有innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高度。
内部宽高是指除去菜单栏、工具栏、边框等占位元素后，用于显示网页的净宽高。
还有一个outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽高。

2、navigator
navigator对象表示浏览器的信息，最常用的属性包括：
navigator.appName：浏览器名称；
navigator.appVersion：浏览器版本；
navigator.language：浏览器设置的语言；
navigator.platform：操作系统类型；
navigator.userAgent：浏览器设定的User-Agent字符串。

3、screen
screen对象表示屏幕的信息，常用的属性有：
screen.width：屏幕宽度，以像素为单位；
screen.height：屏幕高度，以像素为单位；
screen.colorDepth：返回颜色位数，如8、16、24。

4、location对象表示当前页面的URL信息。
http://www.example.com:8080/path/index.html?a=1&b=2#TOP
可以用location.href获取。要获得URL各个部分的值，可以这么写：
location.protocol; // 'http'
location.host; // 'www.example.com'
location.port; // '8080'
location.pathname; // '/path/index.html'
location.search; // '?a=1&b=2'
location.hash; // 'TOP'
要加载一个新页面，可以调用location.assign(“url”)。
如果要重新加载当前页面，调用location.reload()方法非常方便。

5、
document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。
document的title属性是从HTML文档中的<title>xxx</title>读取的，但是可以动态改变：

用document对象提供的getElementById()和getElementsByTagName()
可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点
document对象还有一个cookie属性，可以获取当前页面的Cookie。

Cookie是由服务器发送的key-value标示符。因为HTTP协议是无状态的，但是服务器要区分到底是哪个用户发过来的请求，就可以用Cookie来区分。当一个用户成功登录后，服务器发送一个Cookie给浏览器，例如user=ABC123XYZ(加密的字符串)...，此后，浏览器访问该网站时，会在请求头附上这个Cookie，服务器根据Cookie即可区分出用户。
Cookie还可以存储网站的一些设置，例如，页面显示的语言等等。
JavaScript可以通过document.cookie读取到当前页面的Cookie：为了解决这个问题，服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。这个行为由浏览器实现，主流浏览器均支持httpOnly选项，IE从IE6 SP1开始支持。

6、history
history对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮。
任何情况，你都不应该使用history这个对象了。

7、DOM操作
//查询DOM
在操作一个DOM节点前，我们需要通过各种方式先拿到这个DOM节点。最常用的方法是document.getElementById()和
document.getElementsByTagName()，document.getElementsByClassName()。
用document对象提供的getElementById()和getElementsByTagName()可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点：
var menu = document.getElementById('drink-menu');
drinks = document.getElementsByTagName('dt');

第二种方法是使用CSS选择器querySelector()和querySelectorAll()，
selector语法，然后使用条件来获取节点，更加方便：
http://www.w3school.com.cn/cssref/css_selectors.asp
var q1 = document.querySelector('#q1');
var ps = q1.querySelectorAll('div.highlighted > p');

//更新DOM
一种是修改innerHTML属性，
// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
p.innerHTML = 'ABC'; // <p id="p-id">ABC</p>
修改CSS也是经常需要的操作。DOM节点的style属性对应所有的CSS，可以直接获取或设置。因为CSS允许font-size这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名fontSize：

// 获取<p id="p-id">...</p>
var p = document.getElementById('p-id');
// 设置CSS:
p.style.color = '#ff0000';
p.style.fontSize = '20px';
p.style.paddingTop = '2em';

//插入DOM
当我们获得了某个DOM节点，想在这个DOM节点内插入新的DOM，
如果这个DOM节点是空的，那么直接使用innerHTML；若DOM节点不是空的，因为innerHTML会直接替换掉原来的所有子节点。
有两个办法可以插入新的节点。
一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点。
另一个，我们会从零创建一个新的节点，然后插入到指定位置：
haskell = document.createElement('p');
haskell.id = 'haskell';
haskell.innerText = 'Haskell';
list.appendChild(haskell);

动态创建一个节点然后添加到DOM树中，可以实现很多功能。举个例子，下面的代码动态创建了一个style节点，然后把它添加到<head>节点的末尾，这样就动态地给文档添加了新的CSS定义：
var d = document.createElement('style');
d.setAttribute('type', 'text/css');
d.innerHTML = 'p { color: red }';
document.getElementsByTagName('head')[0].appendChild(d);

如果我们要把子节点插入到指定的位置怎么办？可以使用parentElement.insertBefore(newElement, referenceElement);， 子节点会插入到referenceElement之前。

////删除DOM
要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉：